适用场景：
工厂模式的作用是，将一个复杂对象的构建和使用分离开，构建不需要用户操作，用户只负责使用，它和builder模式的
区别就是，这个复杂对象的构建过程不需要用户来参与，交由工厂来操作，而builder则是需要用户来自己操作的
之所以称之为工厂，也就是说，我们能够将一些列有类似构建的复杂对象都封装成一个产品类，然后工厂类拥有这些
复杂对象的构建过程，用户只需指定具体工厂来生产或者告诉工厂要生产的对象就可以获得产品

抽象工厂模式则不是生产具体的产品，而是生产一组组成产品的子对象，这些子对象使用接口或抽象类指定，因为他们有多种类型
抽象工厂是生产零件的，不生产具体的产品，实现的具体工厂在定义时需要将抽象工厂中指定的抽象方法实现，每个方法
返回的都是零件对象，那么具体的工厂就可以根据自己的需求来各自指定自己会生产什么样的零件了，以确定自己是什么样类型的工厂，
也就是说，适合于这样的一种情况，有一些类型，他们的构成成分一样，但是他们的成分具体内容不一样，那么使用抽象工厂模式，
就是要达到，不同的工厂可以自己根据需要产生自己的成分，进而达到用工厂本身代表产品