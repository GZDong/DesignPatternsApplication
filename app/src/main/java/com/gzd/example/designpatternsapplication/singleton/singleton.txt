使用场景：
当有一个需要被经常使用到的工具类，打算使用它来操作一些比较消耗资源的操作的时候，比如说IO，数据库，线程池，网络请求，缓存等等，需要避免一种情况，
那就是在程序中每次创建时都通过创建一个对象去使用它，那样就太消耗资源了，所以最好的情况是保证它在程序中只有一个对象实例，然后在需要使用它的地方
提供这个实例就可以了（由这里也可以看出，这里存在并发访问问题）;另外一种情况就是，虽然它不是很消耗内存，但是按照业务需求，它也应该是中只有一个对
象的。
所以有几个要点：
1.保证只能有一个实例，不同让调用者使用new
2.保证多线程问题不会失效
3.保证反序列化时不会重新构建对象